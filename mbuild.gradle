///////////////oklib插件库 copy aar行为//////////////////

def final cameralibPath = "/cameralib/build/outputs/aar/cameralib-release.aar";
def final componentlibPath = "/componentlib/build/outputs/aar/componentlib-release.aar";
def final databaselibPath = "/databaselib/build/outputs/aar/databaselib-release.aar";
def final httplibPath = "/httplib/build/outputs/aar/httplib-release.aar";
def final imageloaderlibPath = "/imageloaderlib/build/outputs/aar/imageloaderlib-release.aar";
def final utillibPath = "/utillib/build/outputs/aar/utillib-release.aar";
def final videoplaylibPath = "/videoplaylib/build/outputs/aar/videoplaylib-release.aar";
def final windowlibPath = "/windowlib/build/outputs/aar/windowlib-release.aar";
def final baseProjectPath = "/baseProject";
def final toAarPath = "/aarlib";

task copyaar(type: Copy) {
    from cameralibPath;
    into toAarPath;
}


//////////////////////参考//////////////////////////////////

////注入到项目中的组件表['tabsegment','letters_nav','dialog/center_list_dialog','pop/multi_select_list_pop']
//ArrayList pourComponentsList = ['recyclerview/rv_refresh_component']
//ArrayList pourModelsList = []
//
////反注入的组件
//def componentName = "recyclerview/letters_nav"
////反注入的模板
//def modelName = "address_book"
//
////def final toProjectPath = rootDir.getAbsolutePath() + "/cocoframewhite";//     ../cocoframewhite这样写,在method中,会失效.必须全路径才能传入
//def final toProjectPath = "D:\\work\\otherProject\\MDK\\app";
//def final itemXMLPath="D:\\work\\otherProject\\MDK\\app\\src\\main\\res\\layout\\item_group.xml";
//def final beanPath="D:\\work\\otherProject\\MDK\\app\\src\\main\\java\\fay\\mdk_android\\model\\directories\\group\\rv_refresh_component\\GroupeBean.java";
//
////常用命令
////gradle addComponent 增加控件
////gradle addModel     增加模板
////gradle pour         把组件注入到项目
////gradle initBase     初始化项目
////gradle createBean   通过xml创建bean文件,配置好itemXMLPath和beanPath
////
//// 如果要修复一个控件XXX,最好的方法
////      1.initBase让基础项目最干净化
////      2.pourComponentsList = ['XXX'],componentName = "XXX"并pour
////      3.在cocoframewhite修改好并调试,然后addComponent
////===================================================================================================
//def final pathSrcManual = toProjectPath + "/COCOFrame接入手册";
//def final resPath = "/src/main/res";
//def final toprojectpath_res = toProjectPath + resPath;
//def final toprojectpath_layout = toprojectpath_res + "/layout";
//def final toprojectpath_values = toprojectpath_res + "/values";
//def final baseProjectPath = "/baseProject";
//def final javaPath = "/src/main/java/com/baseproject";
//def final componentsFolder = "/components/";
//def final modelsFolder = "/models/"
//def final propertyName = "config.properties";
//def final propertyKey_Step = "step";//配置文件的使用步骤属性
//def final PRODUCT_PATH = project.getProjectDir().getAbsolutePath() + "/product";
//def final PRODUCT_VIEWS_PATH = PRODUCT_PATH + componentsFolder;
//def final pathManifest = toProjectPath + "/src/main/AndroidManifest.xml";
//task pour() {
//    print("==========================开始注入=============================\n")
//}
//task pourCreateList() {
//    Set componentsSet = new HashSet();
//    Set modesSet = new HashSet();
//    for (def component : pourComponentsList) {
//        def pathProdctProperties = PRODUCT_PATH + componentsFolder + component + "/" + propertyName;
//        Properties properties = new Properties();
//        properties.load(new FileReader(file(pathProdctProperties)));
//        componentsSet.add(component);
//        def splitTag = ';';
//        def componentsStr=properties.getProperty('components');
//        if (componentsStr!=null){
//            def componentsArr = componentsStr.split(splitTag);
//            for (def onecomponent : componentsArr) {
//                componentsSet.add(onecomponent);
//            }
//        }
//        def modelsStr=properties.getProperty('models');
//        if (modelsStr!=null){
//            def modelsArr = modelsStr.split(splitTag);
//            for (def onemodel : modelsArr) {
//                modesSet.add(onemodel);
//            }
//        }
//    }
//    for (def model : pourModelsList) {
//        def pathProdctProperties = PRODUCT_PATH + modelsFolder + model + "/" + propertyName;
//        Properties properties = new Properties();
//        properties.load(new FileReader(file(pathProdctProperties)));
//        modesSet.add(model);
//        def splitTag = ';';
//
//        def componentsStr=properties.getProperty('components');
//        if (componentsStr!=null){
//            def componentsArr = componentsStr.split(splitTag);
//            for (def onecomponent : componentsArr) {
//                componentsSet.add(onecomponent);
//            }
//        }
//        def modelsStr=properties.getProperty('models');
//        if (modelsStr!=null){
//            def modelsArr = modelsStr.split(splitTag);
//            for (def onemodel : modelsArr) {
//                modesSet.add(onemodel);
//            }
//        }
//    }
//    for (def temp : componentsSet) {
//        pourComponentsList.add(temp)
//    }
//}
//task pourComponents(type: Copy) {
//    //复制Components的res和java
//    for (def nameSpace : pourComponentsList) {
//        File file = file(PRODUCT_PATH + componentsFolder + nameSpace);
//        if (!file.exists()) {
//            print("注入的控件不存在: " + nameSpace);
//            continue;
//        }
//        from PRODUCT_PATH + componentsFolder + nameSpace;//因为有copy任务,所以不能放到<<doLast中
//        into toProjectPath + "/src/main/";
//        outputs.upToDateWhen { false }//总是执行任务,不要UP-DATE
//        exclude '**/values'//因values不可互相覆盖, so不复制value下的文件,而是合并追加
//        exclude '**/libs'
//        if (!toProjectPath.contains("cocoframewhite")) {//如果是cocoframewhite项目,则允许注入config文件,以便反注入
//            exclude 'config.properties'//如果不copy  config过去,则addComponent时,会导致组件config丢失
//        }
//    }
//    doLast {
//        //合并组件的使用手册
//        for (def nameSpace : pourComponentsList) {
//            def pathProdctProperties = PRODUCT_PATH + componentsFolder + nameSpace + "/" + propertyName;
//            pourProject_makeXMLs(PRODUCT_PATH, componentsFolder, nameSpace, toprojectpath_values);
//            pourProject_makeManual(pathProdctProperties, pathSrcManual, nameSpace);
//        }
//    }
//}
//task pourModels(type: Copy) {
//    //复制模块的res和java
//    for (def nameSpace : pourModelsList) {
//        File file = file(PRODUCT_PATH + modelsFolder + nameSpace);
//        if (!file.exists()) {
//            print("注入的模块不存在:: " + nameSpace);
//            continue;
//        }
//        from PRODUCT_PATH + modelsFolder + nameSpace;//因为有copy任务,所以不能放到<<doLast中
//        into toProjectPath + "/src/main/";
//        outputs.upToDateWhen { false }//总是执行任务,不要UP-DATE
//        exclude '**/values'//因values不可互相覆盖, so不复制value下的文件,而是合并追加
//        exclude '**/libs'
//        if (!toProjectPath.contains("cocoframewhite")) {//如果是cocoframewhite项目,则允许注入config文件,以便反注入
//            exclude 'config.properties'//如果不copy  config过去,则addComponent时,会导致组件config丢失
//        }
////        expand([//需要有占位符
////                databaseHostname: 'db.company.com',
////                version: versionId,
////                buildNumber: (int)(Math.random() * 1000),
////                date: new Date()
////        ])
//    }
//    doLast {
//        def pathManifestString = file(pathManifest).getText("UTF-8");
//        //合并模块的使用手册
//        for (def nameSpace : pourModelsList) {
//            def pathProdctProperties = PRODUCT_PATH + modelsFolder + nameSpace + "/" + propertyName;
//            pourProject_makeXMLs(PRODUCT_PATH, modelsFolder, nameSpace, toprojectpath_values);
//            pourProject_makeManual(pathProdctProperties, pathSrcManual, nameSpace);
//            pourProject_makeManifest(pathProdctProperties, pathManifestString, pathManifest);
//        }
//    }
//}
//task initBase(type: Copy) {
//    from baseProjectPath;
//    into toProjectPath;
//}
//task clearBase(type: Delete) {
//    delete toProjectPath;
//}
//task addComponent(type: Copy) {
//    def comPonentPath = PRODUCT_PATH + componentsFolder + componentName;
//    //抽取java,res文件夹,过滤空文件夹到components
//    from toProjectPath + "/src/main/";
//    into comPonentPath;
//    exclude 'AndroidManifest.xml'
//    exclude 'AndroidViewAnimations-1.1.3.jar'
//    exclude 'httpclient-4.2.5.jar'
//    exclude 'httpcore-4.2.4.jar'
//    exclude '**/app'
//    exclude '**/frame'
//    exclude '**/models'
//    exclude '**/util'
//    exclude '**/widgets'
//    exclude '**/activity_main.xml'
//    exclude '**/MainActivity.java'
//    includeEmptyDirs = false
//    outputs.upToDateWhen { false }//总是执行任务,不要UP-DATE
//    eachFile { fileCopyDetails ->
//        if (fileCopyDetails.getPath().contains("res/values")) {
//            filter { String line ->//反注入的时候,过滤掉注释//此功能过滤注释没问题, 但是会导致图片失效
////        "[$line]"
//                if (line.contains("====================================" + componentName)) {
//                    "";
//                } else {
//                    "$line";
//                }
//            }
//        }
//    }
//    doFirst {
//        delete(comPonentPath);//先把待注入的技术库清空
//    }
//}
//task addModel(type: Copy) {
//    def modelPath = PRODUCT_PATH + modelsFolder + modelName;
//    from toProjectPath + "/src/main/";
//    into modelPath;
//    exclude 'AndroidManifest.xml'
//    exclude 'AndroidViewAnimations-1.1.3.jar'
//    exclude 'httpclient-4.2.5.jar'
//    exclude 'httpcore-4.2.4.jar'
//    exclude '**/app'
//    exclude '**/frame'
//    exclude '**/components'
//    exclude '**/activity_main.xml'
//    exclude '**/MainActivity.java'
//    includeEmptyDirs = false
//    outputs.upToDateWhen { false }//总是执行任务,不要UP-DATE
//    eachFile { fileCopyDetails ->
//        if (fileCopyDetails.getPath().contains("res/values")) {
//            filter { String line ->//反注入的时候,过滤掉注释//此功能过滤注释没问题, 但是会导致图片失效
////        "[$line]"
//                if (line.contains("=======================")) {
//                    return;
//                } else {
//                    return line;
//                }
//            }
//        }
//    }
//
//    doFirst {
//        delete(modelPath);//先把待注入的技术库清空
//    }
//}
//task makeCocoFrameJar(type: Jar) {
//    from "baseProject\\src\\main\\java\\com\\baseproject\\cocoframe"
//    destinationDir = file(toProjectPath + '/libs')
//    archiveName = 'cocoframe.jar'
//}
//task makeAllJar(type: Jar) {
//    from {
//        List<File> allFiles = new ArrayList<>();
//        configurations.combinations().collect {
//            for (File f : zipTree(it).getFiles()) {
//                if (f.getName().equals("*.jar")) {
//                    allFiles.addAll(zipTree(f).getAt("asFileTrees").get(0).getDir())
//                }
//            }
//        }
//        allFiles.add(new File('D:\\work\\project\\COCOFrame\\cocoframewhite\\libs'))
//        allFiles // To return the result inside a lambda
//    }
//    archiveName('D:\\work\\project\\COCOFrame\\cocoframewhite\\lib\\cocoframeAll.jar')
//}
//task pourLibs(type: Copy) {
//    for (def nameSpace : pourComponentsList) {
//        File file = file(PRODUCT_PATH + componentsFolder + nameSpace);
//        if (!file.exists()) {
//            continue;
//        }
//        from PRODUCT_PATH + componentsFolder + nameSpace + "/libs";//因为有copy任务,所以不能放到<<doLast中
//        into toProjectPath + "/libs/";
//        outputs.upToDateWhen { false }//总是执行任务,不要UP-DATE
//    }
//}
//task createBean() {
//    //设置XML文件,读取其中btn_,txt_,img_xxx
//    //设置输出bean.java路径,把前缀转换为基本类型,xxx转化为变量名.
//    doLast {
//        Set set = new HashSet();
//        File xmlFile = new File(itemXMLPath);
//        def xmlFileString = xmlFile.getText("UTF-8");
//
//        ArrayList regxList = ['txt_.+\\b','btn_.+\\b','img_.+\\b'];
//        for(def regx:regxList){
//            Pattern pattern = Pattern.compile(regx);
//            Matcher matcher = pattern.matcher(xmlFileString);
//            matcher.matches();
//            while(matcher.find()){
//                //获取 字符串
//                def strWord=matcher.group();
//                set.add(strWord)
////        System.out.println(matcher.start()+"--"+matcher.end());
//            }
//        }
//        def beanFileStr = new File(beanPath).getText("UTF-8");
//        def hodlerName;
//        def beanName;
//        def hodlerStr="";
//        def hodlerFindViewStr="";
//        def beanStr="";
//        for(def name:set){
//            def type=name.split('_')[0];
//            //构造ViewHolder字符串,但是也写入Bean中.  txt_title,hodlerName=title,beanName=title;
//            hodlerName=name.split('_')[1];
//            beanName=hodlerName;
//            if(beanFileStr.contains(hodlerName)){
//                continue;
//            }
//            if(type.equals("txt")){
//                hodlerStr+="  //public TextView "+hodlerName+";\n";
//                beanStr+="  public String "+beanName+";\n";
//                hodlerFindViewStr+="  //"+hodlerName+"= (TextView) itemView.findViewById(R.id."+name+")"+";\n";
//            }else if(type.equals("btn")){
//                hodlerStr+="  //public Button "+hodlerName+";\n";
//                beanStr+="  public String "+beanName+";\n";
//                hodlerFindViewStr+="  //"+hodlerName+"= (Button) itemView.findViewById(R.id."+name+")"+";\n";
//            }else if(type.equals("img")){
//                hodlerStr+="  //public ImageView "+hodlerName+";\n";
//                beanStr+="  public String "+beanName+";\n";
//                hodlerFindViewStr+="  //"+hodlerName+"= (ImageView) itemView.findViewById(R.id."+name+")"+";\n";
//            }
//        }
//        beanFileStr=beanFileStr.replaceFirst('\\{','\\{\n    '+hodlerStr+beanStr+hodlerFindViewStr);
//        fileWrite(beanPath, beanFileStr);
//    }
//
//}
////方法库==========================================================================================
//
////合并xml,多行的,比如attrs.xml
//def appendXMLMulite(nameSpace, srcPath, toPath) {
//    File srcPathFile = new File(srcPath);
//    File toPathFile = new File(toPath);
//    if (!srcPathFile.exists() || !toPathFile.exists()) {
//        return;
//    }
////通过attrs.xml的declare-styleable属性, 查看是否已添加
//    boolean ifExit = false;
//    toPathFile.withReader('UTF-8') { reader ->
//        reader.eachLine {
//            if (it.contains(nameSpace + "的相关属性")) {
//                ifExit = true;
//                return;
//            }
//        }
//    }
//    if (ifExit) {
//        println nameSpace + "的属性已存在!";
//        return;
//    }
//    def readerSrcString = "";//读取的源数据,这些数据将被注入到目标xml尾部.
//    def toPathFileString = toPathFile.getText("UTF-8");
//    boolean ifCopyLine = true;
//    String comment = "<!--====================================" + nameSpace + "的相关属性====================================↓-->\n";//注释
//    if (!toPathFileString.contains(comment)) {//如果还没注释,才加上注释并增加其他xml属性
//        readerSrcString <<= comment
//        srcPathFile.withReader('UTF-8') { reader ->
//            reader.eachLine {
//                if (it.contains("resources>")) {
//                    return;
//                }
//                if (it.contains("<?xml")) {
//                    return;
//                }
//                if (it.contains("<style")) {
//                    if (toPathFileString.contains(it)) {
//                        ifCopyLine = false;
//                        return;
//                    }
//                }
//                if (!ifCopyLine && it.contains("</style>")) {
//                    ifCopyLine = true;
//                    return;
//                }
//                if (ifCopyLine) {
//                    readerSrcString <<= it
//                    readerSrcString << '\n'
//                }
//            }
//            def finalAttrs = fileReplace(toPath, "</resources>", readerSrcString + "\n</resources>");
//            fileWrite(toPath, finalAttrs);
//        }
//    }
//}
////合并String等一行一个数据的xml,缺陷为如果目标项目的string.xml为一行数据换行书写,则会复制相同属性过去.
//def appendXMLSingal(nameSpace, srcPath, toPath) {
//    File srcPathFile = new File(srcPath);
//    File toPathFile = new File(toPath);
//    if (!srcPathFile.exists() || !toPathFile.exists()) {
//        return;
//    }
////通过attrs.xml的declare-styleable属性, 查看是否已添加
//    def nameList = "";
//    boolean ifExit = false;
//    toPathFile.withReader('UTF-8') { reader ->
//        reader.eachLine {
//            if (it.contains(nameSpace + "的相关属性")) {
//                ifExit = true;
//                return;
//            }
//        }
//    }
//    if (ifExit) {
//        println nameSpace + "的属性已存在!";
//        return;
//    }
//    def readerString = "";
//    boolean ifcommentAdded = false;
//    boolean ifAddEndTag = false;
//    def toPathFileString = toPathFile.getText("UTF-8");
//    srcPathFile.withReader('UTF-8') { reader ->
//        reader.eachLine {
//            if (!it.contains("resources>") && !it.contains("<?xml")) {
//                //是否添加了注释
//                if (!ifcommentAdded) {
//                    String comment = "<!--====================================" + nameSpace + "的相关属性====================================↓-->\n";//注释
//                    if (!toPathFileString.contains(comment)) {//如果还没注释,才加
//                        readerString <<= comment
//                    }
//                    ifcommentAdded = true;
//                }
//                //添加结束符
//                if (ifAddEndTag) {
//                    if (it.trim().equals("</style>") || it.equals("</color>") || it.equals("</dimen>")) {
//                        readerString <<= it
//                        readerString << '\n'
//                        ifAddEndTag = false;
//                        return;
//                    }
//                }
//                //如果目标文件已经有源文件中的某行,则不加入目标文件.  除非这行是it.equals("</style>")等value文件的标准收尾符号.
//                if (!toPathFileString.contains(it)) {
//                    if (it.contains("<style")) {
//                        ifAddEndTag = true;//发现开始标签,则允许增加结束标签
//                    }
//                    readerString <<= it
//                    readerString << '\n'
//                }
//            }
//            if (it.contains("declare-styleable")) {
//                nameList <<= it
//            }
//        }
//        def finalAttrs = fileReplace(toPath, "</resources>", readerString + "\n</resources>");
//        fileWrite(toPath, finalAttrs);
//    }
//}
////读取文件并替换字符串
//def fileReplace(path, oldStr, newStr) {
//    def readerString = "";
//    new File(path).withReader('UTF-8') { reader ->
//        reader.eachLine {
//            if (it.find(oldStr)) {
//                it = it.replace(oldStr, newStr)
//            }
//            readerString <<= it
//            readerString << '\n'
//        }
//        return readerString
//    }
//}
////写文件
//def fileWrite(path, stringBuffer) {
//    new File(path).withWriter('UTF-8') {
//        within ->
//            within.append(stringBuffer)
//    }
//}
//
//def pourProject_makeManifest(pathProdctProperties, pathManifestString, pathManifest) {
//    Properties properties = new Properties()
//    File propertyFile = new File(pathProdctProperties)
//    properties.load(propertyFile.newDataInputStream())
//    //注入权限
//    def splitTag = '/>';
//    boolean ifPourPermission = true;
//    def permissionArray = properties.getProperty('permission').split(splitTag);
//    def finalPermission = "";
//    for (def onePermisson : permissionArray) {
//        if (!pathManifestString.contains(onePermisson)) {
//            finalPermission <<= onePermisson;
//            finalPermission << splitTag + '\n';
//        }
//    }
//    if (finalPermission == null || finalPermission.length() < 2) {
//        ifPourPermission = false;
//    }
//    if (ifPourPermission) {
//        def finalManifest = fileReplace(pathManifest, "<application", finalPermission + "<application");
//        fileWrite(pathManifest, finalManifest);
//    }
//    //注入activity
//    splitTag = ">";
//    boolean ifPourActivity = true;
//    def activityArray = properties.getProperty('activity').split(splitTag);
//    def finalActivity = "";
//    for (def one : activityArray) {
//        print(one)
//        if (!pathManifestString.contains(one)) {
//            finalActivity <<= one;
//            finalActivity << splitTag + '\n';
//        }
//    }
//
//    if (finalActivity == null || finalActivity.length() < 2) {
//        ifPourActivity = false;
//    }
//    if (ifPourActivity) {
//        def finalManifest = fileReplace(pathManifest, "</application>", finalActivity + "</application>");
//        fileWrite(pathManifest, finalManifest);
//    }
//}
//
//def pourProject_makeXMLs(PRODUCT_PATH, folder, nameSpace, toprojectpath_values) {
//    //合并所有属性文件
//    def srcPathAttrs = PRODUCT_PATH + folder + nameSpace + "/res/values/attrs.xml"
//    def toPathAttrs = toprojectpath_values + "/attrs.xml"
//    appendXMLMulite(nameSpace, srcPathAttrs, toPathAttrs);
//
//    def srcPathcolors = PRODUCT_PATH + folder + nameSpace + "/res/values/colors.xml"
//    def toPathcolors = toprojectpath_values + "/colors.xml"
//    appendXMLSingal(nameSpace, srcPathcolors, toPathcolors);
//
//    def srcPathdimens = PRODUCT_PATH + folder + nameSpace + "/res/values/dimens.xml"
//    def toPathdimens = toprojectpath_values + "/dimens.xml"
//    appendXMLSingal(nameSpace, srcPathdimens, toPathdimens);
//
//    def srcPathstrings = PRODUCT_PATH + folder + nameSpace + "/res/values/strings.xml"
//    def toPathstrings = toprojectpath_values + "/strings.xml"
//    appendXMLSingal(nameSpace, srcPathstrings, toPathstrings);
//
//    def srcPathstyles = PRODUCT_PATH + folder + nameSpace + "/res/values/styles.xml"
//    def toPathstyles = toprojectpath_values + "/styles.xml"
//    appendXMLMulite(nameSpace, srcPathstyles, toPathstyles);
//}
//
//def pourProject_makeManual(pathProdctProperties, pathSrcManual, nameSpace) {
//    //写入用户手册pathSrcManual中
//    File pathSrcManualFile = file(pathSrcManual);
//    if (!pathSrcManualFile.exists()) {
//        println("\n目标项目不存在使用手册:" + pathSrcManual);
//        return;
//    }
//    if (!new File(pathProdctProperties).exists()) {
//        println("\n技术库中不存在config文件:" + pathProdctProperties);
//        return;
//    }
//    boolean ifExit = false;
//    pathSrcManualFile.withReader('UTF-8') { reader ->
//        reader.eachLine {
//            if (it.contains(nameSpace + "使用步骤")) {
//                ifExit = true;
//                return;
//            }
//        }
//    }
//    if (ifExit) {
//        println nameSpace + "的使用步骤已存在!";
//        return;
//    }
//
//    def stepStr = "";
//    def holder = "COCOFrame接入手册:";
//    boolean ifStep = false;
//    new File(pathProdctProperties).withReader('UTF-8') { reader ->
//        reader.eachLine {
//            if (it.contains("step=")) {//使用步骤必须在config文件最后才可以
//                ifStep = true;
//                it = reader.readLine();
//                stepStr <<= "====================================" + nameSpace + "使用步骤↓====================================\n"
//            }
//            if (ifStep) {
//                stepStr <<= it
//                stepStr << '\n'
//            }
//        }
//    }
//    ifStep = false;
//    def finalManual = fileReplace(pathSrcManual, holder, holder + "\n" + stepStr);
//    fileWrite(pathSrcManual, finalManual);
//}
//
//initBase.dependsOn clearBase
//initBase.shouldRunAfter addComponent
//pour.dependsOn pourCreateList
//pour.dependsOn pourLibs
//pour.dependsOn pourComponents
//pour.dependsOn pourModels
////addModel.dependsOn addModelImage
////pourLibs.mustRunAfter pour
////pourComponents.mustRunAfter pour
////pourModels.mustRunAfter pour
////pourModels.dependsOn pourComponents
////=====================================================================================
////task test(type:Copy) {
////    def modelPath = PRODUCT_PATH + modelsFolder + modelName;
////    from toProjectPath + "/src/main/";
////    into modelPath;
////    exclude 'AndroidManifest.xml'
////    exclude 'AndroidViewAnimations-1.1.3.jar'
////    exclude 'httpclient-4.2.5.jar'
////    exclude 'httpcore-4.2.4.jar'
////    exclude '**/app'
////    exclude '**/frame'
////    exclude '**/components'
////    exclude '**/activity_main.xml'
////    exclude '**/MainActivity.java'
////    includeEmptyDirs = false
////    outputs.upToDateWhen { false }//总是执行任务,不要UP-DATE
////    doFirst {
////        delete(modelPath);//先把待注入的技术库清空
////    }
////}
////task test1() {
////    println("test1")
////}
////test1.mustRunAfter test


